plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.8.1'
}

repositories {
    mavenCentral()
}

def allureVersion = '2.19.0',
    aspectjVersion = '1.9.9.1',
    selenideVersion = '6.9.0',
    junitVersion = '5.9.0',
    restAssuredVersion = '5.2.0',
    ownerVersion = '1.0.12',
    assertjVersion = '3.23.1'

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    configuration = "testImplementation"
    useJUnit5 {
        version = allureVersion
    }
}

dependencies {
    testImplementation(
            "org.aspectj:aspectjweaver:$aspectjVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
           "org.assertj:assertj-core:$assertjVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion")
    testRuntimeOnly(
            'org.slf4j:slf4j-simple:2.0.3',
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    systemProperties += [
            'junit.jupiter.execution.parallel.enabled'                 : System.getProperty("parallel", "true"),
            'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
            'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
            'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads", "1").toInteger()
    ]

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task smokeTests(type: Test) {
    useJUnitPlatform {
        includeTags 'smoke'
    }
}

task mainTests(type: Test) {
    useJUnitPlatform {
        includeTags 'main'
    }
}

task searchTests(type: Test) {
    useJUnitPlatform {
        includeTags 'search'
    }
}

task signInPageTests(type: Test) {
    useJUnitPlatform {
        includeTags 'SignInPageTests'
    }
}

task signUpPageTests(type: Test) {
    useJUnitPlatform {
        includeTags 'SignUpPageTests'
    }
}

task remindPasswordPageTests(type: Test) {
    useJUnitPlatform {
        includeTags 'RemindPasswordPageTests'
    }
}